#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define U_TAPPING_TERM 200

&lt {
    quick-tap-ms = <150>;
    tapping-term-ms = <200>;
    flavor = "balanced";
};

&mt { flavor = "balanced"; };

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        btLoader {
            bindings = <&bootloader>;
            key-positions = <1 10>;
            timeout-ms = <30>;
            layers = <2>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <9 10>;
            layers = <0>;
        };

        alt-tab {
            bindings = <&kp LC(LA(TAB))>;
            key-positions = <19 20 21>;
        };

        esc {
            bindings = <&mt LA(F4) ESCAPE>;
            key-positions = <16 15 14>;
        };

        meh-e {
            bindings = <&kp LS(LA(LC(E)))>;
            key-positions = <16 19 20>;
        };

        meh-a {
            bindings = <&kp LA(LS(LC(A)))>;
            key-positions = <15 16 19>;
        };

        meh-h {
            bindings = <&kp LS(LA(LC(H)))>;
            key-positions = <43 44 45 31 33 32>;
        };

        alt-tab2 {
            bindings = <&kp LA(TAB)>;
            key-positions = <28 27 26>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&none               &kp J  &kp G  &kp M  &kp P  &none                  &none                     &kp V      &kp B  &kp W  &kp Q  &none
&mt SQT UNDERSCORE  &kp R  &kp S  &kp N  &kp D  &mt SEMICOLON COMMA    &mt DOUBLE_QUOTES PERIOD  &kp A      &kp E  &kp I  &kp H  &mt EXCLAMATION QUESTION
&none               &kp X  &kp F  &kp L  &kp C  &none                  &none                     &kp U      &kp O  &kp Y  &kp K  &none
                                  &mo 3  &kp T  &mo 1                  &mo 2                     &kp SPACE
            >;
        };

        NUM {
            bindings = <
&trans                             &kp KP_SLASH  &kp KP_MULTIPLY  &kp KP_MINUS   &kp KP_PLUS  &trans                                 &trans     &kp N7        &kp N8        &kp N9        &kp PERCENT  &trans
&mt LEFT_BRACKET LEFT_PARENTHESIS  &mkp MB2      &kp ENTER        &kp BACKSPACE  &mkp MB1     &mt RIGHT_BRACKET RIGHT_PARENTHESIS    &kp EQUAL  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0       &trans
&trans                             &kp LWIN      &kp LEFT_ALT     &kp LSHIFT     &kp LCTRL    &trans                                 &trans     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD   &trans
                                                                  &trans         &trans       &trans                                 &trans     &trans
            >;
        };

        NAV {
            bindings = <
&trans  &kp LC(MINUS)   &kp LC(PG_UP)  &kp LC(TAB)     &kp LC(EQUAL)    &trans          &trans           &none      &none            &none      &kp LA(LS(D))  &trans
&trans  &kp LEFT_ARROW  &kp UP_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp C_VOL_DN    &kp C_VOLUME_UP  &mkp MB1   &kp BACKSPACE    &kp ENTER  &kp DELETE     &trans
&trans  &kp HOME        &kp PG_UP      &kp PG_DN       &kp END          &trans          &trans           &kp RCTRL  &kp RIGHT_SHIFT  &kp RALT   &kp RGUI       &trans
                                       &trans          &kp TAB          &trans          &trans           &trans
            >;
        };

        FN {
            bindings = <
&trans  &kp TILDE          &none              &none              &kp GRAVE          &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F11  &trans
&trans  &kp LS(LA(LC(R)))  &kp LS(LA(LC(S)))  &kp LS(LC(LA(N)))  &kp LS(LA(LC(D)))  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F10  &trans
&trans  &kp LEFT_WIN       &kp LEFT_ALT       &kp LSHIFT         &kp LCTRL          &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                                              &trans             &trans             &trans    &trans  &trans
            >;
        };
    };
};
