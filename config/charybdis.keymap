#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        MiddleClickRight {
            bindings = <&mkp MCLK>;
            key-positions = <21 22>;
        };

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 16>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 19>;
        };

        BrakLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 15>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 20>;
        };

        BraceLeft {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 14>;
        };

        BraceRight {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <9 21>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&none               &kp J  &kp G  &kp M  &kp P  &none                  &none                     &kp V      &kp B  &kp W  &kp Q  &none
&mt SQT UNDERSCORE  &kp R  &kp S  &kp N  &kp D  &mt SEMICOLON COMMA    &mt DOUBLE_QUOTES PERIOD  &kp A      &kp E  &kp I  &kp H  &mt EXCLAMATION QUESTION
&none               &kp X  &kp F  &kp L  &kp C  &none                  &none                     &kp U      &kp O  &kp Y  &kp K  &none
                                  &mo 3  &kp T  &mo 1                  &mo 2                     &kp SPACE
            >;
        };

        NUM {
            bindings = <
&trans                             &kp KP_SLASH  &kp KP_MULTIPLY  &kp KP_MINUS   &kp KP_PLUS  &trans                                 &trans     &kp N7        &kp N8        &kp N9        &kp PERCENT  &trans
&mt LEFT_BRACKET LEFT_PARENTHESIS  &mkp MB2      &kp ENTER        &kp BACKSPACE  &mkp MB1     &mt RIGHT_BRACKET RIGHT_PARENTHESIS    &kp EQUAL  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0       &trans
&trans                             &kp LWIN      &kp LEFT_ALT     &kp LSHIFT     &kp LCTRL    &trans                                 &trans     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD   &trans
                                                                  &trans         &trans       &trans                                 &trans     &trans
            >;
        };

        NAV {
            bindings = <
&trans  &kp LC(MINUS)   &kp LC(PG_UP)  &kp LC(TAB)     &kp LC(EQUAL)    &trans          &trans           &none      &none            &none      &kp LA(LS(D))  &trans
&trans  &kp LEFT_ARROW  &kp UP_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp C_VOL_DN    &kp C_VOLUME_UP  &mkp MB1   &kp BACKSPACE    &kp ENTER  &kp DELETE     &none
&trans  &kp HOME        &kp PG_UP      &kp PG_DN       &kp END          &trans          &trans           &kp RCTRL  &kp RIGHT_SHIFT  &kp RALT   &kp RGUI       &trans
                                       &trans          &kp TAB          &trans          &trans           &trans
            >;
        };

        FUN {
            bindings = <
&trans  &trans   &kp F1  &kp F2   &kp F3   &kp F4     &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&trans  &kp DEL  &kp F5  &kp F6   &kp F7   &kp F8     &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp LALT
&trans  &trans   &kp F9  &kp F10  &kp F11  &kp F12    &trans        &trans            &trans             &trans           &trans        &to 0
                         &trans   &trans   &trans     &trans        &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
